import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, ScrollView, TouchableOpacity, ActivityIndicator, Alert, ToastAndroid } from 'react-native';
import VideoPlayer from 'react-native-video-player';
import AiText from '../../components/AiText';
import Play from '../../assets/icons/Play.svg';
import Read from '../../assets/icons/Read.svg';
import Lock from '../../assets/icons/Lock.svg';
import Download from '../../assets/icons/Download.svg';
import Tick from '../../assets/icons/Tick.svg';
import MaterialCard from '../../components/MaterialCard';
import { useRoute, useNavigation } from '@react-navigation/native';
import { getCoursePage } from '../../api/api';
import Dot from '../../assets/icons/Dot.svg';
import ThreeDotModal from '../../components/modal/ThreeDotModal';
import HeaderComp from '../../components/HeaderComp';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { downloadFile } from '../CourseMaterial/Download'; // Make sure this is imported
import { SectionList } from 'react-native';
const VideoPlay = () => {
  const [activeTab, setActiveTab] = useState('Tab1');
  const [modalVisible, setModalVisible] = useState(false);
  const [downloadedFiles, setDownloadedFiles] = useState({});
  const [loading, setLoading] = useState(true);
  const [downloading, setDownloading] = useState(null);
  const getSectionizedData = ({content, ...section}) => {
    return {...section, data : content }
    }
  const toggleModal = (visible) => {
    setModalVisible(visible);
  };

  const options = [
    { label: 'Share', action: () => console.log('Share pressed') },
    { label: 'Feedback', action: () => console.log('Feedback pressed') },
    { label: 'Download Settings', action: () => console.log('Download Settings pressed') },
  ];

  const navigation = useNavigation();
  const route = useRoute();
  const content = route.params.content;
  const [data, setData] = useState([]);

  useEffect(() => {
    const fetch = async () => {
      try {
        const response = await getCoursePage(107, 60570);
        setData(response.msg.sections || []);
        
        // Check AsyncStorage for previously downloaded files
        const storedFiles = await AsyncStorage.getItem('downloadedFiles');
        if (storedFiles) {
          setDownloadedFiles(JSON.parse(storedFiles));
        }
      } catch (error) {
        Alert.alert('Error', error.message);
      } finally {
        setLoading(false);
      }
    };
    fetch();
  }, []);

  const generateDownloadKey = (sectionId, contentId) => `${sectionId}_${contentId}`;

  const getIcon = (type) => {
    switch (type) {
      case 'video':
        return <Play />;
      case 'assessment_link':
        return <Lock />;
      case 'reading_material':
        return <Read />;
      default:
        return null;
    }
  };

  const handlePress = async (sectionId, content) => {
    const downloadKey = generateDownloadKey(sectionId, content.id);
    if (downloadedFiles[downloadKey]) {
      // Open from AsyncStorage
      const filePath = downloadedFiles[downloadKey];
      ToastAndroid.show('Playing from downloads...', ToastAndroid.SHORT);
      console.log(filePath);
      navigation.navigate('VideoPlay', { content, localPath: filePath });
    } else {
      navigation.navigate('VideoPlay', { content });
    }
  };
  

  const handleDownload = async (sectionId, content) => {
    const downloadKey = generateDownloadKey(sectionId, content.id);
    ToastAndroid.show('Downloading...', ToastAndroid.SHORT);
    setDownloading(downloadKey); // Start downloading state
  
    try {
      const filePath = await downloadFile(content.content); // Await the downloadFile function
      if (filePath) {
        // Update the downloadedFiles state and AsyncStorage
        const newDownloadedFiles = { ...downloadedFiles, [downloadKey]: filePath };
        setDownloadedFiles(newDownloadedFiles);
        await AsyncStorage.setItem('downloadedFiles', JSON.stringify(newDownloadedFiles));
        
        // Show success message
        ToastAndroid.show('Download completed!', ToastAndroid.SHORT);
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setDownloading(null); // Stop downloading state
    }
  };

  return (
    <>
      <HeaderComp toggleModal={toggleModal} />
      <VideoPlayer
        video={{ uri: content ? (downloadedFiles[content.id] || content.content) : 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4' }}
        videoWidth={1600}
        videoHeight={900}
        thumbnail={{ uri: 'https://i.picsum.photos/id/866/1600/900.jpg' }}
        autoplay={true}
        pauseOnPress={true}
        fullScreenOnLongPress={true}
        showDuration={true}
      />
      <View className="pt-[16px]" style={styles.whole}>
        <View className="pb-[24px] gap-[4px]" style={styles.box1}>
          <AiText title='Generated by AI' />
          <Text className=" text-[16px] font-[500] leading-[22px] text-black" style={[styles.text,styles.font]}>{content.title}</Text>
          <View className="h-[16px]" style={{flexDirection:'row',alignItems:'center'}}>
            <Text className=" text-[12px] font-[400]text-[#6D747A] mr-[8px]" style={[styles.p,styles.font]}>Video</Text>
            <Dot style={{alignSelf:'center',marginTop:3,width:3,height:3}}/>
            <Text className="text-[12px] font-[400] text-[#6D747A] ml-[8px]" style={[styles.p,styles.font]}>{content.duration || '5 min'}</Text>
          </View>
        </View>
        {loading ? (
          <ActivityIndicator size="large" color="#6D747A" />
        ) : (
          <ScrollView style={styles.scrollContainer}>
            {data.length > 0 ? (
            <SectionList
            scrollEnabled={false}
            showsVerticalScrollIndicator={false}
            sections={data.map(getSectionizedData)}
            keyExtractor={(item, index) => item.id + index}
            ItemSeparatorComponent={() => <View className="h-[1px] bg-[#F2F2F2] w-[90%] self-end mt-[20px]"></View>}
            renderSectionHeader={({section : {section_name}})=>{
              return (<View>
                <View className="mb-8 h-[1px] w-[99%] self-end bg-[#F2F2F2]"/>
                <Text style={styles.tit}>{section_name}</Text>
                </View>)
            }}
            renderSectionFooter={()=>(<View className="mt-8" />)}
            renderItem={({ item, index, section }) => {
              const downloadKey = generateDownloadKey(section.id, item.id);
            console.log(downloadKey);
              return item && item.id ? (
                <MaterialCard
                  key={index}
                  title={typeof item.title === 'string' ? item.title : 'Untitled Content'}
                  sub={
                    item.type === 'video'
                      ? 'Video'
                      : item.type === 'assessment_link'
                        ? 'Quiz'
                        : item.type === 'reading_material'
                          ? 'Reading'
                          : ''
                  }
                  duration={
                    item.type === 'video'
                      ? `${item.duration}`
                      : item.type === 'assessment_link'
                        ? '10 Questions'
                        : item.type === 'reading_material'
                          ? '5 min'
                          : ''
                  }
                  start={getIcon(item.type, item)}
                  end={
                    item.type !== 'assessment_link' ? (
                      downloading === downloadKey ? (
                        <ActivityIndicator size={26} color="#2E6BE5" />
                      ) : downloadedFiles[downloadKey] ? (
                        <Tick />
                      ) : (
                        <TouchableOpacity onPress={() => handleDownload(section.id, item)}>
                          <Download />
                        </TouchableOpacity>
                      )
                    ) : null
                  }
                  onPress={() => {
                    if (item.type === 'video') {
                      handlePress(section.id, item);
                    }
                  }}
                />
              ) : null;
            }}
          />
            ) : (
              <Text>No course data available.</Text>
            )}
          </ScrollView>
        )}
        <ThreeDotModal
          modalVisible={modalVisible}
          toggleModal={toggleModal}
          optionList={options}
        />
      </View>
    </>
  );
};

export default VideoPlay;

const styles = StyleSheet.create({
  font: {
    fontFamily: 'Helvetica Neue',
  },
  scrollContainer: {
    flex: 1,
  },
  whole: {
    flex: 1,
    paddingHorizontal: 16,
    backgroundColor: 'white',
  },
  text: {
    color: 'black',
  },
  p: {
    color: '#6D747A',
  },
  box1: {
    borderBottomColor: '#F2F2F2',
    borderBottomWidth: 1,
  },
  tit: {
    color: '#939CA3',
  },
  section: {},
});
